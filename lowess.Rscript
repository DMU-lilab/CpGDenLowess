#!/usr/bin/env Rscript

# mtbr pipline

# Load libraries

suppressPackageStartupMessages(library("optparse", quietly=TRUE, verbose=FALSE, warn.conflicts=FALSE))
suppressPackageStartupMessages(library("data.table", quietly=TRUE, verbose=FALSE, warn.conflicts=FALSE))
suppressPackageStartupMessages(library("zoo", quietly=TRUE, verbose=FALSE, warn.conflicts=FALSE))
suppressPackageStartupMessages(library("methyutils", quietly=TRUE, verbose=FALSE, warn.conflicts=FALSE))
suppressPackageStartupMessages(library("IRanges", quietly=TRUE, verbose=FALSE, warn.conflicts=FALSE))

# function

GetDensity <- function(cg.mtbr, kWinSize,ref.length) {
   colnames(cg.mtbr) <- c("chr", "posi", "rC_n", "rC_p", "rT_n", "rT_p")
   posi <- cg.mtbr$posi
   rt <- logical(ref.length)
   rt[posi] <- TRUE
   win <- list(L = as.integer(kWinSize / 2), R = as.integer(kWinSize / 2))
   return(swsCalc(rt, win))
 }

GetScore <- function(cg.mtbr, kWinSize, ref.length) {
   ##mtbr score sliding windows
   colnames(cg.mtbr) <- c("chr", "posi", "rC_n", "rC_p", "rT_n", "rT_p")
   
   cg.mtbr$rC <- cg.mtbr$rC_p + cg.mtbr$rC_n
   cg.mtbr$rT <- cg.mtbr$rT_p + cg.mtbr$rT_n
   
   rC <- integer(ref.length)
   rC[cg.mtbr$posi] <- cg.mtbr$rC
   rT <- integer(ref.length)
   rT[cg.mtbr$posi] <- cg.mtbr$rT
   win <- list(L = as.integer(kWinSize / 2), R = as.integer(kWinSize / 2))
   rCs <- swsCalc(rC, win)
   rTs <- swsCalc(rT, win)
   score <- rCs/(rCs + rTs)
   score[is.na(score[])] <- 0
   
   return(score)
}

RescaleData <- function(density, score) {
   density.scale <- (density - min(density)) / (max(density) - min(density))
   score.scale <- (score - min(score)) / (max(score) - min(score))
   
   return(data.frame(density = density.scale, score = score.scale))
 }

Rotate <- function(x, y, x0, y0, theta){
  xt <- x - x0
  yt <- y - y0
  
  xr <- xt * cos(theta) - yt * sin(theta)
  yr <- xt * sin(theta) + yt * cos(theta)
  
  return(c(xr + x0, yr + y0))

}
 
Transform <- function(x, y, x0, y0, delta, theta){
  xyt <- Rotate(x + delta, y + delta, x0, y0, theta)

  return(xyt)
}

##Specify desired options in a list

option_list <- list(
    make_option(c("-l","--genome-library"), help="Bioconductor BSgenome library name", default = "BSgenome.Mmusculus.UCSC.mm9"),
    make_option(c("-n","--genome-name"), help="genome library object name. ex: \"Mmusculus\", \"Hsapiens\", \"Scerevisiae\"", default = "Mmusculus"),
    make_option(c("-t","--genome-type"), help="genome type , example mm9, mm10, hg19, hg18, default is NULL", default = ""),
    make_option(c("-w","--window-size"), help="sliding window size , default is 2500", default = 2500)

)

# Get command line options
arguments <- parse_args(OptionParser(usage = "%prog [options] mtbrPath", option_list = option_list), positional_arguments = 1)
opt <- arguments$options


kGenomeLibrary <- opt$`genome-library`
kGenomeName <- opt$`genome-name`
kGenomeType <- opt$`genome-type`
kWindowSize <- opt$`window-size`
kMtbrPath <- arguments$args

# Get mtbr file names

if(!file.exists(kMtbrPath)){
	stop("mtbr file path \"", kMtbrPath ,"\" does not exist.")
}

mtbr.filenames <- list.files(kMtbrPath)

# load the genome library

kGenomeTypeList <- list(
	mm9  = list(genome.library="BSgenome.Mmusculus.UCSC.mm9",genome.name="Mmusculus"),
	mm10 = list(genome.library="BSgenome.Mmusculus.UCSC.mm10",genome.name="Mmusculus"),
	hg18 = list(genome.library="BSgenome.Hsapiens.UCSC.hg18",genome.name="Hsapiens"),
	hg19 = list(genome.library="BSgenome.Hsapiens.UCSC.hg19",genome.name="Hsapiens"),
	hg38 = list(genome.library="BSgenome.Hsapiens.UCSC.hg38",genome.name="Hsapiens")
)
kGenome <- NULL

if ( kGenomeType %in% names(kGenomeTypeList) ){
	suppressPackageStartupMessages(library(kGenomeTypeList[[kGenomeType]][["genome.library"]], character.only = TRUE, quietly=TRUE, verbose=FALSE, warn.conflicts=FALSE))
	kGenome <- get(kGenomeTypeList[[kGenomeType]][["genome.name"]]) 
}else {
	suppressPackageStartupMessages(library(kGenomeLibrary, character.only = TRUE, quietly=TRUE, verbose=FALSE, warn.conflicts=FALSE))
	kGenome <- get(kGenomeName) 
}

if ( is.null(kGenome)){
	stop( "Load Biocondutor Genome Library ERROR " )
}

# sample.name <- paste(head(unlist(strsplit(basename(kMtbrPath), ".", fixed = TRUE)),-1),sep="",collapse = "." )

# read and process the mtbr files
for (file.name in mtbr.filenames){

 	file.path <- paste(kMtbrPath, "/", file.name, sep="")

	 if(file_test("-f", file.path))
	 {
	 	message("[*] Processing ", file.name, "\t", date())
	 	chr.name <- paste(head(unlist(strsplit(basename(file.name), ".", fixed = TRUE)), -1), sep="", collapse = "." )
	 
	 	# read the mtbr file
	 	
	 	message("\treading the mtbr file", "\t", date())
	 	
	 	load(file.path)
	 	
	 	# get CG Density
	 	
	 	message("\tgetting CG density ", "\t", date())
	 	
	 	dna.seq <- kGenome[[chr.name]]
	 	ref.length <- length(dna.seq)
		density <- GetDensity(cg.mtbr, kWindowSize, ref.length)

		# get Score 
		
		message("\tgetting Score ", "\t", date())
		score <- GetScore(cg.mtbr, kWindowSize, ref.length)

	 	# rescale

		message("\trescaling ", "\t", date())
	 	rescale.data <- RescaleData(density, score)
 		rescale.data$pos <- 1:nrow(rescale.data)
 		#  lowess

 		message("\tlowess regression ", "\t", date())
 		lowess.data <- lowess(rescale.data$score, rescale.data$density, f = 0.08)

 		# build segements

 		message("\tbuilding segements ", "\t", date())	
		N <- 5000
		step <- (max(lowess.data$x) - min(lowess.data$x)) / N
		x <- seq(min(lowess.data$x), max(lowess.data$x), step)
		y <- approx(lowess.data, xout= x)$y
		x.start <- head(x, -1)
		y.start <- head(y, -1)
		x.end <- tail(x, -1)
		y.end <- tail(y, -1)
		a <- (y.end - y.start) / (x.end - x.start)
		b <- y.start - a * x.start
		theta <- atan(a) - (135 * pi / 180)
		delta = (1 - x.start - y.start) / 2
		df.seg <- data.frame(id = 1:length(x.start), xs = x.start, ys = y.start, xe = x.end, ye = y.end, delta = delta, theta = theta )
		df.seg$xe[nrow(df.seg)] <- df.seg$xe[nrow(df.seg)] + 0.1 
		rng.seg <- IRanges(start = df.seg$xs * 1e8, end = df.seg$xe * 1e8)
		rng.score <- IRanges(start = rescale.data$score * 1e8, end = rescale.data$score * 1e8)
		ov <- findOverlaps(rng.score, rng.seg, select = "first")
		rescale.data$id <- ov
		dt.rescale.data <- data.table(rescale.data)
		dt.seg <- data.table(df.seg)
		dt.rescale.data <- merge(dt.rescale.data, dt.seg, by = "id")

		data.trans <- dt.rescale.data[,.(value = Transform(score, density, xs, ys, delta, theta)), by = pos]
		df.trans <- data.frame(score = data.trans$value[seq(1, nrow(data.trans), 2)], density = data.trans$value[seq(2, nrow(data.trans), 2)])

	 	# write wig file
	 	
		message("\twritting wig file","\t", date())
		head <- paste("variableStep chrom=", chr.name, " span=1\n", sep = "")
		score.wig <- file.path(paste("./", chr.name, ".score.trans.wig", sep = ""))
		density.wig <- file.path(paste("./", chr.name, ".density.trans.wig", sep = ""))

		cat(head, file = score.wig, append = TRUE)
		cat(head, file = density.wig, append = TRUE)
	
		write.table(df.trans$score, score.wig, row.names = FALSE, col.names = FALSE, quote = FALSE, append = TRUE)
		write.table(df.trans$density, density.wig, row.names = FALSE, col.names = FALSE, quote = FALSE, append = TRUE)
	 }

}

